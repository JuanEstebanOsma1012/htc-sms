@inproceedings{10.1145/2335755.2335846,
author = {Rynge, Mats and Callaghan, Scott and Deelman, Ewa and Juve, Gideon and Mehta, Gaurang and Vahi, Karan and Maechling, Philip J.},
title = {Enabling large-scale scientific workflows on petascale resources using MPI master/worker},
year = {2012},
isbn = {9781450316026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2335755.2335846},
doi = {10.1145/2335755.2335846},
abstract = {Computational scientists often need to execute large, loosely-coupled parallel applications such as workflows and bags of tasks in order to do their research. These applications are typically composed of many, short-running, serial tasks, which frequently demand large amounts of computation and storage. In order to produce results in a reasonable amount of time, scientists would like to execute these applications using petascale resources. In the past this has been a challenge because petascale systems are not designed to execute such workloads efficiently. In this paper we describe a new approach to executing large, fine-grained workflows on distributed petascale systems. Our solution involves partitioning the workflow into independent subgraphs, and then submitting each subgraph as a self-contained MPI job to the available resources (often remote). We describe how the partitioning and job management has been implemented in the Pegasus Workflow Management System. We also explain how this approach provides an end-to-end solution for challenges related to system architecture, queue policies and priorities, and application reuse and development. Finally, we describe how the system is being used to enable the execution of a very large seismic hazard analysis application on XSEDE resources.},
booktitle = {Proceedings of the 1st Conference of the Extreme Science and Engineering Discovery Environment: Bridging from the EXtreme to the Campus and Beyond},
articleno = {49},
numpages = {8},
keywords = {task clustering, workflow management},
location = {Chicago, Illinois, USA},
series = {XSEDE '12}
}
@article{SepulvedaRodriguez2022,
abstract = {At present, there is a proliferation of virtualization technologies (VTs), which are part of the basic and underlying infrastructure of popular cloud computing. Those interested in VTs are faced with a non-unified volume of information and various approaches to modes of operation, classification structures, and the performance implications of these technologies. This makes it difficult to decide which type of VT is appropriate for a particular context. Therefore, this paper reviews the state of the art on VT taxonomic models. Methodologically, a literature review is carried out to identify VT classification models, recognizing their features and weaknesses. With this in mind, a new taxonomy of virtualization technologies is proposed, which responds to the weaknesses identified in the analyzed schemes. The new VT taxonomy combines the Abstraction Level and Virtual Machine Type approaches, providing the reader with a means to visualize VTs. In doing so, the reader can locate the level of abstraction at which each VT is developed, in addition to the type of machine projected, whether it is a complete system or an execution environment for processes. The proposed taxonomy can be used in the academic environment to facilitate teaching processes or in the business environment to facilitate decision-making when implementing VTs.},
author = {Sep{\'{u}}lveda-Rodr{\'{i}}guez, Luis E. and Chavarro-Porras, Julio C. and Sanabria-Ordo{\~{n}}ez, John A. and Castro, Harold E. and Matthews, Jeanna},
doi = {10.15446/ing.investig.97363},
file = {:Applications/Mendeley Desktop.app/Contents/MacOS/Users/aariaz/Downloads/revii_bog,+RIIv42n3Art_97363+RV1.pdf:pdf},
issn = {22488723},
journal = {Ingenieria e Investigacion},
keywords = {container,taxonomy,virtual machine,virtualization,virtualization technologies},
mendeley-groups = {Anteproyecto,ACOFI/Trabajo extenso - ACOFI 2025,articulo},
number = {3},
title = {{A Survey of Virtualization Technologies: Towards a New Taxonomic Proposal}},
url = {https://openurl-ebsco-com.crai.referencistas.com/contentitem/edsdia:edsdia.ART0001545825?sid=ebsco:plink:crawler&id=ebsco:edsdia:edsdia.ART0001545825&crl=c},
volume = {42},
year = {2022}
}
@article{Malhotra2024,
abstract = {Nowadays, cloud computing is gaining tremendous attention to deliver information via the internet. Virtualization plays a major role in cloud computing as it deploys multiple virtual machines on the same physical machine and thus results in improving resource utilization. Hypervisor-based virtualization and containerization are two commonly used approaches in operating system virtualization. In this article, we provide a systematic literature review on various phases in maintenance of containers including container image detection, container scheduling, container security measures, and performance evaluation of containers. We have selected 145 primary studies out of which 24% of studies are related to container performance evaluation, 42% of studies are related to container scheduling techniques, 22% of studies are related to container security measures, and 12% of studies are related to container image detection process. A few studies are related to container image detection process and evaluation of container security measures. Resource utilization is the most considered performance objective in almost all container scheduling techniques. We conclude that there is a need to introduce new tagging approaches, smell detection approaches, and also new approaches to detect and resolve threat issues in containers so that we can maintain the security of containers.},
author = {Malhotra, Ruchika and Bansal, Anjali and Kessentini, Marouane},
doi = {10.1145/3645092},
file = {:Users/aariaz/Downloads/EBSCO-FullText-07_30_2025.pdf:pdf},
issn = {15577341},
journal = {ACM Computing Surveys},
keywords = {Additional Key Words and PhrasesContainers,Docker,kubernetes,orchestration,performance evaluation,scheduling techniques,vulnerability},
mendeley-groups = {articulo},
number = {8},
title = {{A Systematic Literature Review on Maintenance of Software Containers}},
volume = {56},
year = {2024}
}
@article{Kaiser2023,
abstract = {Internet-of-Things (IoT) devices continuously gather data and send the data to the cloud for further processing. However, with the recent trend of increasing number of IoT devices, billions of devices are anticipated to send data to the cloud, eventually impacting performance and cost. To solve this problem, one way is to process data locally inside edge nodes. The edge nodes are closer to the IoT devices and improve the overall performance of the system by distributing cloud tasks in edge devices. Edge devices are generally resource-constrained with limited RAM, CPU, and storage. Container technologies are ideal in edge nodes due to their isolation and being lightweight. A benchmarking scheme for containers on edge devices can help compare container technologies, hardware devices and architectures, and software. However, there is not sufficient research in this direction. So, in this work, we take a step towards developing this benchmark. We explore and evaluate the performance, efficiency, and suitability of different container technologies, including Docker, Podman, and Singularity, in the context of edge computing on ARM-based devices. Our experiments include evaluating computer vision applications that employ Haar Cascades, HOG, CNN with YOLO algorithm, and data science workloads commonly encountered in edge computing scenarios. We devised sets of performance metrics to assess container technology, including waiting time, receiving time, processing time, resource utilization, and throughput. Besides, we investigate how different container technologies optimize resource utilization and compare their efficiency on ARM-based edge devices. Our benchmarking analysis yielded valuable insights into the strengths and limitations of each container technology. Our results reveal that Docker, Podman, and Singularity containers exhibit diverse resource consumption patterns and network efficiency. Docker container has better CPU and RAM utilization for most applications. Docker also boasts the lowest waiting time of approximately 0.9 seconds, comparable to native performance. In terms of processing time, Docker excels in Car detection (0.12 seconds), while Singularity and Podman outperform Docker in Object detection. Notably, native systems exhibit a remarkable improvement over containers (average of 1.2 seconds) in Object detection (0.98 seconds), highlighting the challenges of resource-intensive deep neural network algorithms on edge devices. Based on our findings, we offer practical advice for picking the best container technology for specific use cases in ARM-based edge computing. We also offer a set of benchmarking approaches and metrics that can be used to drive future research on container technologies on ARM platforms.},
author = {Kaiser, Shahidullah and Tosun, Ali Saman and Korkmaz, Turgay},
doi = {10.1109/ACCESS.2023.3321274},
issn = {2169-3536},
journal = {IEEE Access},
keywords = {Docker,Edge computing,Internet of Things (IoT),Podman,benchmark,computer vision,container,data science,singularity},
mendeley-groups = {articulo},
month = {jan},
pages = {107331--107347},
publisher = {IEEE},
title = {{Benchmarking Container Technologies on ARM-Based Edge Devices}},
url = {https://doaj.org/article/2033f2041344497d9369c7846d31d01e},
volume = {11},
year = {2023}
}
@inproceedings{10094059,
abstract = {In this study we explore and systematically review the latest research on container orchestration architectures, models and methods and their application in cloud environments. The aim of our systematic mapping study is to identify, classify the existing research papers and thus give organized knowledge of this evolving area. We tried to establish a systematic methodology that ensures the validity of our secondary study and construct a classification scheme that helps derive useful information from the existing body of research. We've gained insights about specific technology related issues like container orchestrators and container runtimes but also knowledge about more generalizable aspects like research strategies and approaches used in the primary studies. The results gave us insights about the current state and maturity of the research area and helped us identify research gaps. We were able to formulate recommendations for future research.},
author = {Naydenov, Nikolas and Ruseva, Stela},
booktitle = {2023 22nd International Symposium INFOTEH-JAHORINA, INFOTEH 2023},
doi = {10.1109/INFOTEH57020.2023.10094059},
isbn = {9781665475464},
issn = {2767-9470},
keywords = {Container orchestration,Containerd,Docker,Kubernetes,cloud computing,container orchestrator,container runtime,edge computing,methodology,research strategy,security,systematic review},
mendeley-groups = {SMS/IEEE,SMS/All dbs,SMS/IEEE/EX,ACOFI/Trabajo extenso - ACOFI 2025,articulo},
month = {mar},
pages = {1--8},
title = {{Cloud Container Orchestration Architectures, Models and Methods: a Systematic Mapping Study}},
year = {2023}
}
@misc{Kaiser2022,
abstract = {Container technology is becoming increasingly popular as an alternative to traditional virtual machines because it provides a faster, lighter, and more portable runtime environment for the applications. A container bundles the application and its binary code, libraries, and configuration files together while sharing the host operating system image. Accordingly, containers efficiently share resources and operate small micro-services, software programs, and even more extensive applications with less overhead than virtual machines. There are many container technologies available with Docker being the most popular and many technologies support multiple architectures, including the ARM architecture. Due to its energy efficiency and high-performance, which are crucial parameters in containerization, ARM architecture is becoming prevalent in container technologies. In this paper, we explore various container technologies that support ARM architecture and investigate the pros and cons of each technology. Moreover, we provide a comparative analysis of both container orchestrators and container runtimes that are most prominent competitors of Docker. We also consider security of container technologies with particular focus on the image scanning tools that supports ARM architecture. Our survey reveals that ARM technology is gaining popularity in containerization and almost all recent technologies support ARM architecture.},
author = {Kaiser, Shahidullah and Haq, Md Sadun and Tosun, Ali Saman and Korkmaz, Turgay},
booktitle = {IEEE Access},
doi = {10.1109/ACCESS.2022.3197151},
file = {:Users/aariaz/Downloads/Container_Technologies_for_ARM_Architecture_A_Comprehensive_Survey_of_the_State-of-the-Art.pdf:pdf},
issn = {21693536},
keywords = {ARM architecture,Docker,HPC,IoT,Linux container,cloud computing,container orchestration,container runtimes,container security,container technology,edge computing},
mendeley-groups = {SMS/SNOWBALL/Backward - 1,FASE 3,articulo},
pages = {84853--84881},
title = {{Container Technologies for ARM Architecture: A Comprehensive Survey of the State-of-the-Art}},
volume = {10},
year = {2022}
}
@article{Bentaleb2022,
abstract = {Modern scientific research challenges require new technologies, integrated tools, reusable and complex experiments in distributed computing infrastructures. But above all, computing power for efficient data processing and analyzing. Containers technologies have emerged as a new paradigm to address such intensive scientific applications problems. Their easy deployment in a reasonable amount of time and the few required computational resource make them more suitable. Containers are considered light virtualization solutions. They enable performance isolation and flexible deployment of complex, parallel, and high-performance systems. Moreover, they gained popularity to modernize and migrate scientific applications in computing infrastructure management. Additionally, they reduce computational time processing. In this paper, we first give an overview of virtualization and containerization technologies. We discuss the taxonomies of containerization technologies of the literature, and then we provide a new one that covers and completes those proposed in the literature. We identify the most important application domains of containerization and their technological progress. Furthermore, we discuss the performance metrics used in most containerization techniques. Finally, we point out research gaps in the related aspects of containerization technology that require more research.},
author = {Bentaleb, Ouafa and Belloum, Adam S.Z. and Sebaa, Abderrazak and El-Maouhab, Aouaouche},
doi = {10.1007/s11227-021-03914-1},
issn = {15730484},
journal = {Journal of Supercomputing},
keywords = {Computing,Container,Micro-services,Orchestrator,Parallel,Scientific application,Virtualization},
mendeley-groups = {SMS/IN-DI,articulo},
number = {1},
pages = {1144--1181},
title = {{Containerization technologies: taxonomies, applications and challenges}},
url = {https://doi.org/10.1007/s11227-021-03914-1},
volume = {78},
year = {2022}
}
